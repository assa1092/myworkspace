참고   :  https://cornswrold.tistory.com/184?category=755361

Thread 
  - 동시에 무언가를 해야한다 -> 스레드...
  - 스레드마다 새로운 실행 흐름
  - 새로운 메모리 구조를 만든다.
  - class, heap영역은 다른 스레드와 공유가능 -> 동기화 문제가 발생
  - 동기화문제는 Synchronized로 동시접근을 제어.
  - 그러나 stack은 공유 불가...


::::::::::::::::::::::::::::::     Thread 생성법 3가지    :::::::::::::::::::::::::::::::::::


===============  ###  Thread생성
사용자 스레드 생성 순서
1. 스레드 클래스를 상속하는 자식 클래스를 만듦
2. 사용자의 스레드에서 실행할 코드를 자식클래스의 run()메서드에 작성
3. 자식 클래스를 이용해서 스레드 객체를 만듦
4. 스레드 객체가 갖고있는 start()메서드를 호출함.
------> 스레드가 객체가  생성만 됨 (runable상태)	
------> 제어권을 갖게되면 running 상태
------> 다 쓰고 나면 dead 상태


Java는 단일상속을 원칙으로한다.
 -단, interface는 예외...	 
  public class Aaa implements Inter1, Inter2{}

=================== ### Interface를 이용해서 Thread 생성=========================
1. UserRunnable 클래스 생성. 단, Runnable 인터페이스 구현.
2. run()메서드에 사용자 스레드에서 실행할 코드를 작성
3. UserRunnable 클래스를 이용해서 runnable 객체를 만듦.
4. Thread 클래스를 이용해서 스레드 객체를 만듦.(runnable객체를 파라미터 넣는다).
5. 스레드 객체가 갖고 있는 start() 메서드 호출
------> 스레드가 객체가  생성만 됨 (runable상태)	
------> 제어권을 갖게되면 running 상태
------> 다 쓰고 나면 dead 상태



Thread에 우선순위를 지정해 줄수는 있는데.. 100% 보장을 못함...
Thread에 우선순위를 지정해 줄수는 있는 join()메서드


========================================================================
ut1 스레드가 항상 main스레드보다 작업이 일찍 끝나게 하려면...
main()메서드에서 join()메서드 호출
main end 가 제일 마지막에 출력되게
		
ut1 스레드가 항상 urt스레드보다 작업이 일찍 끝나게 하려면...
UserRunnable1 클래스의 run()메서드에서 join()메서드 호출



======================     익명 객체를 이용한 Thread 생성    ================================

public static void main(String[] args) {
	// 내부클래스... 익명 객체로 사용하기도...
	new Thread(new Runnable() {
			
			// 딱 한번만 사용할때....
			// 그런경우에만 익명객체로 사용....
			
		public void run() {
			for(int i=0; i<10;i++) {
				System.out.println(i);
			}
				
		}
		}).start();		// 익명 객체로 사용하는것은 일회용...	

}




public synchronized void method(){
    임계 영역; // (하나의 스레드만 실행)
}

// 메소드안에서 일부 내용만 임계 영역으로 만들고 싶다면 동기화(synchronized) 블록을 만든다.
public void method(){
    // 여러 스레드 실행 가능 영역
    
    synchronized(공유객체){ // 공유객체가 자기자신이면 this 삽입
        임계 영역;
    }
    
    // 여러 스레드 실행 가능 영역
}



a스레드가 끝나기전에 b스레드가 끝나버린경우...
임계영역이 발생한다.
동기화문제가 발생된다...



동기화문제 해결방법
1. 동기화 메서드 : 키가 하나만 있다...기다리야한다... 속도가 조금 떨어짐
2. 동기화 블럭 : 키가 하나씩 있다...기다리지 않고 바로 실행..



접근순서에 의한 동기화


작가
독자

작가가 글을 올리기 전에 
독자가 먼저와서 글을 보려한다. 글이없다...

독자는 작가가 글을 쓸때 까지 기다리고
작가는 글을 다 쓰면 알려줘야한다.

.....

