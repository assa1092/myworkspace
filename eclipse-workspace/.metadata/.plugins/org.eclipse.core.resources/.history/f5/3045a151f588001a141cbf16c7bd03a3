package com.naver;

public class Test {
//	변수 선언 공식
//	자료형 변수명 =  자료형에 맞는 값;
//	boolean: true, false
//	char: '' char c=64; char a=97;
//	byte: -128 ~127
//	shoort
//	int :21억
//	long long a = 333L;
//	float f = 3.132F;
//	double d= 3.13;
	// new -> heep memory 에 새로운 객체를 만들고 저장
//	자료형 변수명(reference) = new 생성자();
//	String msg = "hello";			//암시적 객체 생성법
//	String msg1 = new String("hello");	// 명시적 객체 생성법
	
	//0, 1, 2, 3,0, 1, 2, 3, ... 
	public void me7() {

		for(int i=0;i<100;i++) {
			int dap = i%4;
			System.out.println(dap);
		}
	}
	
	
	
	public void me62(int dan) {
		
		for(int i=1;i<10; i++) {
			// String의 불변성 때문에 메모리 많이 차지
			// StringBuffer은 String의 불변성 대체로 사용...
			StringBuffer sb =  new StringBuffer();
			sb.append(dan);
			sb.append("X");
			sb.append(i);
			sb.append("=");
			sb.append(dan*i);
			
			 System.out.println(sb.toString());
			//System.out.println(dan + "X" + i + "=" + i*dan);
		}
	}
	
	
	
	
	public void me61() {
		StringBuffer sb = new StringBuffer();
		sb.append("hello");
		sb.append(" world");
		sb.append(" !!!");
		
		String msg = sb.toString();
		System.out.println(msg);
	}
	
	
	public void me6() {
		String msg = "hello";
		msg += "world";  
		msg += "!!!";
		System.out.println(msg);
	}
	
	public void me5() {
		String msg1 = new String ("hello");
		String msg2 = new String ("hello");
		String msg3 =  new String("Hello");
		
		
		// 반환형이 있는 메소드는 받는 값이 있어야한다.
		boolean b = msg1.equals(msg2);
		System.out.println(b);
		
		System.out.println(msg2.equals(msg3));
	}
	
	
	public void me4() {
		String msg1 = new String("hello");
		String msg2 = new String("hello");
		String msg3 = msg2;
		
		System.out.println(msg1 == msg2);
		System.out.println(msg2 == msg3);
		
	}
	
	
	public void me3() {
		String msg1 = "hello";
		String msg2 = "Hello";
		System.out.println(msg1== msg2);
		
		
	}
	
	public boolean me2() {
		String msg1 = "hello";
		String msg11 = "hello";
		
		return msg1 == msg11;
	}
	
	
	
	
	public void me1() {
		String msg1 = "hello";
		String msg2 = new String("hello");
		
		
		System.out.println(msg1==msg2);
	}

}
